declaration
-----------
let premiumButton = UIButton()

Setup
-----
premiumButton.setTitle("Future Features üï¥üèº", for: .normal)
premiumButton.backgroundColor = UIColor(red: CGFloat(24.0/255.0), green: CGFloat(24.0/255.0), blue: CGFloat(24.0/255.0), alpha: CGFloat(0.8))
premiumButton.setBackgroundColor(color: UIColor.darkGray, forState: UIControl.State.highlighted)
premiumButton.layer.cornerRadius = 5
premiumButton.layer.borderColor = UIColor.white.cgColor
premiumButton.layer.borderWidth = 1
premiumButton.setTitleColor(.white, for: .normal)
premiumButton.translatesAutoresizingMaskIntoConstraints = false
premiumButton.clipsToBounds = true
premiumButton.titleLabel?.font = UIFont.systemFont(ofSize: 24.0, weight: .heavy)
premiumButton.addTarget(self, action: #selector(premiumButtonAction), for: .touchUpInside)
view.addSubview(premiumButton)


NSLayoutConstraints
-------------------
premiumButton.topAnchor.constraint(equalTo: self.view.topAnchor, constant: (self.view.bounds.height * 0.7)),
premiumButton.centerXAnchor.constraint(equalTo: self.view.centerXAnchor),
premiumButton.heightAnchor.constraint(equalTo: self.view.heightAnchor, multiplier: 0.1),
premiumButton.widthAnchor.constraint(equalTo: self.view.widthAnchor, multiplier: 0.7)

Action function
---------------
@objc func premiumButtonAction(sender: UIButton!) {
    premiumButton.isEnabled = false
    premiumButton.backgroundColor = UIColor.darkGray
    premiumButton.setTitleColor(.darkGray, for: .normal)
    Timer.scheduledTimer(withTimeInterval: 0.5, repeats: false, block: { _ in
        self.premiumButton.isEnabled = true
    })
    Timer.scheduledTimer(withTimeInterval: 0.5, repeats: false, block: { _ in
        self.premiumButton.backgroundColor = UIColor(red: CGFloat(24.0/255.0), green: CGFloat(24.0/255.0), blue: CGFloat(24.0/255.0), alpha: CGFloat(0.8))
    })
    Timer.scheduledTimer(withTimeInterval: 0.5, repeats: false, block: { _ in
        self.premiumButton.setTitleColor(.white, for: .normal)
    })
    let secondView = UIStoryboard(name: "Main", bundle: nil).instantiateViewController(withIdentifier: "premiumMainView")
    secondView.transitioningDelegate = transitionDelegate
    let transition = CATransition()
    transition.duration = 0.25
    transition.type = CATransitionType.push
    transition.subtype = CATransitionSubtype.fromRight
    transition.timingFunction = CAMediaTimingFunction(name:CAMediaTimingFunctionName.easeInEaseOut)
    view.window!.layer.add(transition, forKey: kCATransition)
    self.present(secondView, animated: true, completion: nil)

}

